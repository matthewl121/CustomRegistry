# .github/workflows/deploy.yml
name: Push-to-EC2

on: 
  push:
    branches: 
      - main  # or your default branch name
      - aws_cd_dev
  workflow_dispatch:  # Allows manual trigger from GitHub UI

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: us-east-1

    - name: Get instance IP
      id: get-ip
      run: |
        IP=$(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=CustomRegistry-Instance" \
          --query 'Reservations[].Instances[?State.Name==`running`].[PublicIpAddress]' \
          --output text)
        echo "instance_ip=$IP" >> $GITHUB_OUTPUT

    - name: Setup SSH
      run: |
        # Create .ssh directory
        mkdir -p ~/.ssh
        
        # Write private key
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
        
        # Set correct permissions
        chmod 600 ~/.ssh/id_rsa
        
        # Verify key was written
        if [ ! -s ~/.ssh/id_rsa ]; then
          echo "Error: SSH key file is empty"
          exit 1
        fi
        
        # Add host key (with error checking)
        if ! ssh-keyscan -H "${{ steps.get-ip.outputs.instance_ip }}" >> ~/.ssh/known_hosts 2>/dev/null; then
          echo "Error: Could not scan host key"
          exit 1
        fi
        
        # Test SSH connection
        echo "Testing SSH connection..."
        if ! ssh -o StrictHostKeyChecking=accept-new -o ConnectTimeout=10 ec2-user@${{ steps.get-ip.outputs.instance_ip }} 'echo "SSH connection successful"'; then
          echo "Error: Could not establish SSH connection"
          exit 1
        fi

    - name: Deploy to EC2
      run: |
        rsync -avz --exclude '.git' ./ ec2-user@${{ steps.get-ip.outputs.instance_ip }}:~/registry/
        ssh ec2-user@${{ steps.get-ip.outputs.instance_ip }} 'cd ~/registry && chmod +x run && ./run install'